diff --git a/ui/Button.lua b/ui/Button.lua
index b30895ed..117a8acc 100644
--- a/ui/Button.lua
+++ b/ui/Button.lua
@@ -6,7 +6,7 @@ local GraphicsUtil = require("graphics_util")
 --@module Button
 local Button = class(
   function(self, options)
-    self.backgroundColor = options.backgroundColor or {.3, .3, .3, .7}
+    self.backgroundColor = options.backgroundColor or {.3, .5, .8, 1}
     self.outlineColor = options.outlineColor or {.5, .5, .5, .7}
 
     -- callbacks
@@ -41,14 +41,14 @@ end
 function Button:drawBackground()
   if self.backgroundColor[4] > 0 then
     GraphicsUtil.setColor(self.backgroundColor)
-    GraphicsUtil.drawRectangle("fill", self.x, self.y, self.width, self.height)
+    GraphicsUtil.drawRectangle("fill", self.x, self.y, self.width, self.height, self.width / 2, self.height / 2)
     GraphicsUtil.setColor(1, 1, 1, 1)
   end
 end
 
 function Button:drawOutline()
   GraphicsUtil.setColor(self.outlineColor)
-  GraphicsUtil.drawRectangle("line", self.x, self.y, self.width, self.height)
+  GraphicsUtil.drawRectangle("line", self.x, self.y, self.width, self.height, self.width / 2, self.height / 2)
   GraphicsUtil.setColor(1, 1, 1, 1)
 end
 
diff --git a/ui/Grid.lua b/ui/Grid.lua
index 519ed527..0296a1dd 100644
--- a/ui/Grid.lua
+++ b/ui/Grid.lua
@@ -99,7 +99,8 @@ function Grid:getElementAt(row, column)
       gridHeight = 1,
       x = (column - 1) * self.unitSize + self.unitMargin,
       y = (row - 1) * self.unitSize + self.unitMargin,
-      content = { TYPE = "GridPlaceholder"}
+      content = { TYPE = "GridPlaceholder"},
+      onSelect = function() play_optional_sfx(themes[config.theme].sounds.menu_cancel) end
     }
     placeholder.getScreenPos = function ()
       local cX, cY = self:getScreenPos()
diff --git a/ui/GridCursor.lua b/ui/GridCursor.lua
index 0db2879a..6437f47e 100644
--- a/ui/GridCursor.lua
+++ b/ui/GridCursor.lua
@@ -138,7 +138,6 @@ function GridCursor:receiveInputs()
     play_optional_sfx(themes[config.theme].sounds.menu_move)
     self:move(GridCursor.directions.down)
   elseif input.isDown["Swap1"] then
-    play_optional_sfx(themes[config.theme].sounds.menu_validate)
     self.selectedGridElement:onSelect(self)
   elseif input.isDown["Raise1"] then
     if self.raise1Callback then
diff --git a/ui/Label.lua b/ui/Label.lua
index f6e46417..77d3de4e 100644
--- a/ui/Label.lua
+++ b/ui/Label.lua
@@ -36,7 +36,7 @@ function Label:setText(text, replacementTable, translate)
 
   if self.translate then
     -- always need a new text cause the font might have changed
-    self.drawable = love.graphics.newText(love.graphics.getFont(), loc(self.text, unpack(self.replacementTable)))
+    self.drawable = love.graphics.newText(love.graphics.getFont(), {{0.8, 0.8, 0, 1}, loc(self.text, unpack(self.replacementTable))})
   else
     if self.drawable then
       self.drawable:set(self.text)
@@ -58,6 +58,7 @@ end
 
 function Label:drawSelf()
   GraphicsUtil.drawClearText(self.drawable, self.x, self.y)
+
 end
 
 return Label
\ No newline at end of file
diff --git a/ui/Menu.lua b/ui/Menu.lua
index d65cdae9..106ca76e 100644
--- a/ui/Menu.lua
+++ b/ui/Menu.lua
@@ -287,14 +287,18 @@ function Menu:update()
 end
 
 function Menu:drawSelf()
-  local animationX = (math.cos(6 * love.timer.getTime()) * 5) - 9
+  local animationX = 0.4 + 0.6 * math.abs((math.cos(3 * love.timer.getTime())))
   local selectedItem = self.menuItems[self.selectedIndex]
-  local arrowx = selectedItem.x - 10 + animationX
-  local arrowy = selectedItem.y + self.menuItems[self.selectedIndex].height / 4
-  love.graphics.draw(arrow, self.x + arrowx, self.y + arrowy, 0, 1, 1, 0, 0)
+  --local arrowx = selectedItem.x - 10 + animationX
+  --local arrowy = selectedItem.y + self.menuItems[self.selectedIndex].height / 4
+  --love.graphics.draw(arrow, self.x + arrowx, self.y + arrowy, 0, 1, 1, 0, 0)
+  GraphicsUtil.setColor(0.2, 0.8, 0.1, animationX)
+  GraphicsUtil.drawRectangle("line", self.x + selectedItem.x, self.y + selectedItem.y, selectedItem.width, selectedItem.height, selectedItem.width / 2, selectedItem.height / 2)
+  GraphicsUtil.drawRectangle("line", self.x + selectedItem.x - 1, self.y + selectedItem.y - 1, selectedItem.width + 2, selectedItem.height + 2, selectedItem.width / 2 + 1, selectedItem.height / 2 + 1)
+  GraphicsUtil.setColor(1, 1, 1, 1)
 
   if DEBUG_ENABLED then
-    GraphicsUtil.setColor(1, 1, 1, 1)
+    GraphicsUtil.setColor(1, 1, 1, 0.5)
     GraphicsUtil.drawRectangle("line", self.x, self.y, self.width, self.height)
   end
 end
